{"version":3,"sources":["constants.js","Components/LoadingIndicator/index.js","Components/SelectThiefNFT/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformPlayerData","playerData","itemId","clan","color","imageURI","class","stealsLeft","maxSteals","totalStealsAttempted","daggerCount","shieldCount","level","LoadingIndicator","className","SelectThiefNFT","setThiefNFT","useState","thiefs","setThiefs","gameContract","setGameContract","mintingNFT","setMintingNFT","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","thiefABIJson","abi","console","log","getThiefClans","a","getAllDefaultThiefs","thiefsTxn","map","thiefData","error","onThiefMint","sender","tokenId","nftTypeIndex","toNumber","checkIfUserHasNFT","thiefNFT","alert","on","off","mintThiefNFTAction","thiefID","mintThiefNFT","mintTxn","wait","warn","length","thief","index","src","slice","alt","toString","type","onClick","Arena","allPlayers","setAllPlayers","stealState","setStealState","Map","tokenIdToPlayer","setTokenIdToPlayer","showToast","setShowToast","stealADagger","playerItemId","victimAddress","get","steal","stealTxn","setTimeout","fetchAllPlayers","getPlayerAddresses","allPlayersTxn","playerArr","i","getAPlayerNftDetails","playerInfo","push","prev","id","value","max","finalRender","player","renderOtherPlayers","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkNetwork","networkVersion","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","txn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81e62378.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = '0xEc61Dd17BCCe3C713d1c5F46C7d4EA0Ee14c6372';\n\nconst transformPlayerData = (playerData) => {\n    return {\n        itemId: playerData.itemId,\n        clan: playerData.clan,\n        color: playerData.color,\n        imageURI: playerData.imageURI,\n        class: playerData.class,\n        stealsLeft: playerData.stealsLeft,\n        maxSteals: playerData.maxSteals,\n        totalStealsAttempted: playerData.totalStealsAttempted,\n        daggerCount: playerData.daggerCount,\n        shieldCount: playerData.shieldCount,\n        level: playerData.level\n    };\n};\n  \nexport { CONTRACT_ADDRESS, transformPlayerData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectThiefNFT.css';\nimport { CONTRACT_ADDRESS, transformPlayerData } from '../../constants';\nimport thiefABIJson from '../../utils/Thief.json';\nimport { ethers } from 'ethers';\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\nconst SelectThiefNFT = ({ setThiefNFT }) => {\n    // varaible to store nft to options\n    const [thiefs, setThiefs] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n\n    const [mintingNFT, setMintingNFT] = useState(false);\n\n    // effect to load contract\n    useEffect(() => {\n        const { ethereum } = window;\n      \n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const gameContract = new ethers.Contract(\n            CONTRACT_ADDRESS,\n            thiefABIJson.abi,\n            signer\n          );\n      \n          setGameContract(gameContract);\n        } else {\n          console.log('Ethereum object not found');\n        }\n    }, []);\n\n    // effect to get nft options and set up event listener for on mint\n    useEffect(() => {\n        const getThiefClans = async () => {\n          try {\n            console.log('Getting contract theif clans to mint');\n      \n            // Call contract to get all mint-able theif cards\n            const thiefsTxn = await gameContract.getAllDefaultThiefs();\n            console.log('thiefsTxn:', thiefsTxn);\n      \n            // Go through all of our NFT clans and transform the data\n            const thiefs = thiefsTxn.map((thiefData) =>\n                transformPlayerData(thiefData)\n            );\n      \n            setThiefs(thiefs);\n          } catch (error) {\n            console.error('Something went wrong fetching thief NFT cards:', error);\n          }\n        };\n\n        const onThiefMint = async (sender, tokenId, nftTypeIndex) => {\n            console.log(\n              `ThiefNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} nftTypeIndex: ${nftTypeIndex.toNumber()}`\n            );\n        \n            if (gameContract) {\n                const thiefNFT = await gameContract.checkIfUserHasNFT();\n                console.log('ThiefNFT: ', thiefNFT);\n                setThiefNFT(transformPlayerData(thiefNFT));\n                alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n            }\n        };\n      \n        // event listener from contract\n        if (gameContract) {\n            getThiefClans();\n            gameContract.on('PlayerNFTMinted', onThiefMint);\n        }\n\n        // clean up listener\n        return () => {\n            if (gameContract) {\n                gameContract.off('PlayerNFTMinted', onThiefMint);\n            }\n        }\n\n      }, [gameContract]);\n    // Render Methods\n    const renderThiefNFTs = () => {\n      return thiefs.map((thief, index) => (\n        <div className={`thief-nft-item ${thief.color}`} key={thief.clan}>\n            <div className='image-container'>\n              <img src={\"https://gateway.pinata.cloud/ipfs/\" + thief.imageURI.slice(7, thief.imageURI.length)} alt={thief.clan} />\n            </div>\n            <div className=\"info-wrapper\">\n              <div className=\"nft-details\">\n                <h4>Clan {thief.clan}</h4>\n                <p>Class #{thief.class.toString()}</p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"nft-mint-button\"\n                onClick={()=> mintThiefNFTAction(index)}\n              >Mint</button>\n            </div>\n        </div>\n      ));\n    }\n    \n    // NFT mint function\n    const mintThiefNFTAction = async (thiefID) => {\n        try {\n          if (gameContract) {\n            setMintingNFT(true);\n            console.log('Minting thief NFT in progress...');\n            const mintTxn = await gameContract.mintThiefNFT(thiefID);\n            await mintTxn.wait();\n            console.log('mintTxn:', mintTxn);\n            setMintingNFT(false);\n          }\n        } catch (error) {\n          console.warn('MintThiefNFTAction Error:', error);\n          setMintingNFT(false);\n          alert('Error: failed in minting your NFT, please check you have enough funds :)');\n        }\n    };\n\n    return (\n        <div className=\"select-thieft-nft-container\">\n            <h2>Which wise clan would you wish to join?</h2>\n            {thiefs.length > 0 && (\n                <div className=\"nft-grid\">{renderThiefNFTs()}</div>\n            )}\n            {mintingNFT && (\n              <div className=\"loading\">\n                <div className=\"indicator\">\n                  <LoadingIndicator />\n                  <p>Minting In Progress...</p>\n                </div>\n                <img\n                  src=\"https://c.tenor.com/Z8GdGNlTC5oAAAAC/ready-to-rob-pops-mask.gif\"\n                  alt=\"Minting loading indicator\"\n                />\n              </div>\n            )}\n        </div>\n    );\n};\n\nexport default SelectThiefNFT;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformPlayerData } from '../../constants';\nimport thiefABIJson from '../../utils/Thief.json';\nimport './Arena.css';\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\nconst Arena = ({ thiefNFT }) => {\n    // State\n    const [gameContract, setGameContract] = useState(null);\n    const [allPlayers, setAllPlayers] = useState([]);\n\n    const [stealState, setStealState] = useState('');\n\n    const [tokenIdToPlayer, setTokenIdToPlayer] = useState(new Map());\n    const [showToast, setShowToast] = useState(false);\n\n    const stealADagger = async (playerItemId) => {\n      try {\n        if(gameContract) {\n          setStealState(\"stealing\");\n          console.log(\"Stealing a dagger...\");\n          let victimAddress = tokenIdToPlayer.get(playerItemId);\n          let stealTxn = await gameContract.steal(victimAddress);\n          await stealTxn.wait();\n          console.log('stealTxn:', stealTxn);\n          setStealState('Successful Steal!');\n\n          setShowToast(true);\n          setTimeout(() => {\n            setShowToast(false);\n          }, 5000);\n        }\n      } catch (error) {\n        console.error('Error stealing from a player:', error);\n        setStealState('');\n      }\n    }\n  \n    // UseEffects\n    useEffect(() => {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const gameContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          thiefABIJson.abi,\n          signer\n        );\n  \n        setGameContract(gameContract);\n      } else {\n        console.log('Ethereum object not found');\n      }\n    }, []);\n\n\n    useEffect(() => {\n        const fetchAllPlayers = async () => {\n            const allPlayersTxn = await gameContract.getPlayerAddresses();\n            console.log(\"Players: \", allPlayersTxn);\n            let playerArr = [];\n            for(let i=0; i<allPlayersTxn.length; i++) {\n                let playerInfo = await gameContract.getAPlayerNftDetails(allPlayersTxn[i]);\n                playerArr.push(transformPlayerData(playerInfo));\n                // adds to map state of token ids to player addresses\n                setTokenIdToPlayer(prev => new Map([...prev, [playerInfo.itemId.toString(), allPlayersTxn[i].toString()]]));\n            }\n            setAllPlayers([...playerArr]);\n        }\n\n        if(gameContract) {\n            fetchAllPlayers();\n        }\n\n    }, [gameContract, stealState]);\n        \n    // function to render all other players that have minted an NFT\n    const renderOtherPlayers = () => {\n        let finalRender = [];\n        if (allPlayers.length > 0) {\n            for (let player of allPlayers) {\n              // skip rendering your player\n              if(thiefNFT.itemId.toString() === player.itemId.toString()) continue;\n              finalRender.push(\n                <div className=\"player-card-container\" key={player.itemId.toString()}>\n                  <div className={`player-item ${player.color}`}>\n                    <div className='image-container'>\n                      <img src={\"https://gateway.pinata.cloud/ipfs/\" + player.imageURI.slice(7, player.imageURI.length)} alt={player.clan} />\n                      <p className=\"player-class\">Level: {player.level.toString()}</p>\n                    </div>\n                    <div className=\"info-wrapper\">\n                        <div className=\"player-stats\">\n                          <progress className=\"steals-left\" value={player.stealsLeft} max={player.maxSteals} />\n                          <p className=\"steals-left-number\">{`${player.stealsLeft} / ${player.maxSteals} Steals`}</p>\n                          <div className=\"stats\">\n                            <p className=\"total-daggers\">{`Total Daggers: ${player.daggerCount}`}</p>\n                            <p className=\"total-shields\">{`Total Shields: ${player.shieldCount}`}</p>\n                          </div>\n                        </div>\n                    </div>\n                    <div className=\"steal-button-wrapper\">\n                      <button\n                        type=\"button\"\n                        className=\"steal-button\"\n                        onClick={()=> stealADagger(player.itemId.toString())}\n                      >Steal A Dagger</button>\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n          return (\n            <div className=\"players-container\">\n              <div className=\"all-players-card-title-wrapper\">\n                <h2 className=\"all-players-card-title\">Players to steal from:</h2>\n              </div>\n              <div className=\"players-grid\">\n                { finalRender }\n              </div>\n            </div>\n          );\n      }\n    }\n\n    return (\n      <div className=\"arena-container\">\n        {thiefNFT && allPlayers && stealState === \"Successful Steal!\" && (\n          <div id=\"toast\" className={showToast ? 'show' : ''}>\n            <p id=\"desc\">{`You stole a dagger! Reload to see.`}</p>\n          </div>\n        )}\n        {thiefNFT && (\n          <div className=\"player-card-container\" key={thiefNFT.itemId.toString()}>\n            <div className=\"player-card-title-wrapper\">\n              <h2 className=\"player-card-title\">Your Player Card: </h2>\n            </div>\n            <div className={`player-item ${thiefNFT.color}`}>\n              <div className='image-container'>\n                <img src={\"https://gateway.pinata.cloud/ipfs/\" + thiefNFT.imageURI.slice(7, thiefNFT.imageURI.length)} alt={thiefNFT.clan} />\n                <p className=\"player-class\">Level: {thiefNFT.level.toString()}</p>\n              </div>\n              <div className=\"info-wrapper\">\n                  <div className=\"player-stats\">\n                    <progress className=\"steals-left\" value={thiefNFT.stealsLeft} max={thiefNFT.maxSteals} />\n                    <p className=\"steals-left-number\">{`${thiefNFT.stealsLeft} / ${thiefNFT.maxSteals} Steals`}</p>\n                    <div className=\"stats\">\n                      <p className=\"total-daggers\">{`Total Daggers: ${thiefNFT.daggerCount}`}</p>\n                      <p className=\"total-shields\">{`Total Shields: ${thiefNFT.shieldCount}`}</p>\n                    </div>\n                  </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Other Players */}\n        {renderOtherPlayers()}\n        \n        {/* loading indicator */}\n        {stealState === 'stealing' && (\n          <div className=\"loading-indicator\">\n            <LoadingIndicator />\n            <p>Stealing...shh...</p>\n          </div>\n        )}\n      </div>\n    );\n  };\n\nexport default Arena;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport SelectThiefNFT from './Components/SelectThiefNFT';\nimport { CONTRACT_ADDRESS, transformPlayerData } from './constants';\nimport thiefABIJson from './utils/Thief.json';\nimport { ethers } from 'ethers';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\n// Constants\n\nconst App = () => {\n  // store user's public address\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [thiefNFT, setThiefNFT] = useState(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  const checkNetwork = async () => {\n    try { \n      if (window.ethereum.networkVersion !== '4') {\n        alert(\"Please connect to Rinkeby!\")\n      }\n    } catch(error) {\n      console.log(error)\n    }\n  }\n\n  // make sure user has a wallet\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        // Check if we're authorized to access the user's wallet\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        // Grab the first authorized account\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n          checkNetwork();\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setIsLoading(false);\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      setIsLoading(true);\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        setIsLoading(false);\n        return;\n      }\n      // request access to account\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n    setIsLoading(false);\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      /*\n      * Scenario #2\n      */\n    } else if (currentAccount && !thiefNFT) {\n      return <SelectThiefNFT setThiefNFT={setThiefNFT} />;\n    } else if (currentAccount && thiefNFT) {\n      return <Arena thiefNFT={thiefNFT} />;\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Thief NFT on address:', currentAccount);\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        thiefABIJson.abi,\n        signer\n      );\n  \n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.clan.length > 0) {\n        console.log('User has Thief NFT');\n        setThiefNFT(transformPlayerData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n\n      setIsLoading(false);\n    };\n  \n    // We only want to run this, if we have a connected wallet\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Thievary NFT Game</p>\n          <p className=\"sub-text\">Can you steal the most daggers?</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}